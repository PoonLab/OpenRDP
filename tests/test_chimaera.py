import unittest
from scripts.chimaera import Chimaera
from scripts.main import read_fasta
from scripts.common import generate_triplets, Triplet
import configparser
import numpy as np


class TestChimaera(unittest.TestCase):

    def setUp(self):
        # Set up test example
        config = configparser.ConfigParser()
        config.read('test_short.ini')
        test_settings = dict(config.items('Chimaera'))

        with open('short.fasta') as small_test:
            names, test_seqs = read_fasta(small_test)
            self.short_align = np.array(list(map(list, test_seqs)))
            self.test_short = Chimaera(self.short_align, names, settings=test_settings)

        self.short_triplets = []
        for trp in generate_triplets(self.short_align):
            self.short_triplets.append(Triplet(self.short_align, names, trp))

        # Set up test example 2
        config = configparser.ConfigParser()
        config.read('test_long.ini')
        test_settings = dict(config.items('Chimaera'))

        with open('long.fasta') as test:
            names, test_seqs = read_fasta(test)
            self.long_align = np.array(list(map(list, test_seqs)))
            self.test_long = Chimaera(self.long_align, names, settings=test_settings)

        self.long_triplets = []
        for trp in generate_triplets(self.long_align):
            self.long_triplets.append(Triplet(self.long_align, names, trp))

        # Set up HIV CRF07 test case
        config = configparser.ConfigParser()
        config.read('default.ini')
        settings = dict(config.items('Chimaera'))

        with open('CRF_07_test.fasta') as hiv_test:
            names, crf07_seqs = read_fasta(hiv_test)
            self.hiv_align = np.array(list(map(list, crf07_seqs)))
            self.test_hiv = Chimaera(self.hiv_align, names, settings=settings)

        self.hiv_triplets = []
        for trp in generate_triplets(self.hiv_align):
            self.hiv_triplets.append(Triplet(self.hiv_align, names, trp))

    def test_set_and_validate_options(self):
        self.assertEqual(9, self.test_short.win_size)
        self.assertEqual(False, self.test_short.strip_gaps)
        self.assertEqual(True, self.test_short.fixed_win_size)
        self.assertEqual(5, self.test_short.num_var_sites)
        self.assertEqual(0.1, self.test_short.frac_var_sites)

        self.assertEqual(40, self.test_long.win_size)
        self.assertEqual(False, self.test_long.strip_gaps)
        self.assertEqual(True, self.test_long.fixed_win_size)
        self.assertEqual(70, self.test_long.num_var_sites)
        self.assertEqual(0.1, self.test_long.frac_var_sites)

        self.assertEqual(False, self.test_hiv.strip_gaps)
        self.assertEqual(True, self.test_hiv.fixed_win_size)
        self.assertEqual(60, self.test_hiv.num_var_sites)
        self.assertEqual(0.1, self.test_hiv.frac_var_sites)

    def test_compress_recombinant(self):
        new_aln = np.array([['T', 'G', 'T', 'G'],
                            ['T', 'T', 'T', 'T'],
                            ['G', 'G', 'G', 'G']])

        expected = [0, 1, 0, 1]
        result = Chimaera.compress_triplet_aln(new_aln)
        self.assertEqual(expected, result)

    def test_get_window_positions_short(self):
        # Test short
        exp_reg_left = 'ATGCT'
        exp_reg_right = 'GACGA'

        seq = self.short_triplets[0].sequences[0]
        res_reg_left, res_reg_right = Chimaera.get_window_positions(seq, 0, 10)

        self.assertEqual(exp_reg_left, ''.join(res_reg_left))
        self.assertEqual(exp_reg_right, ''.join(res_reg_right))

    def test_get_window_positions_long(self):
        # Test long
        exp_reg_left = 'AAAAACCTCTACTCGGACGCGCTGCGCGTTTGAAGTCGCCGCGCGCGATC'
        exp_reg_right = 'AAGGCGCGGGAGTGACTTATTTAGAGCCGTCCGCCAGCCAAATCGGGCAT'

        seq = self.long_triplets[1].sequences[1]
        res_reg_left, res_reg_right = Chimaera.get_window_positions(seq, 0, 100)

        self.assertEqual(exp_reg_left, ''.join(res_reg_left))
        self.assertEqual(exp_reg_right, ''.join(res_reg_right))

    def test_get_window_positions_hiv(self):
        # Test HIV (no gaps stripped)
        exp_reg_left = 'GAATTCTGGAAGGGTTAATTTACTCTAAGAAAAGGCAAGAGATCCTTGATTTG' \
                       'TGGGTCTATCACACACAAGGCTACTTCCCTGATTGGCACAACTACAC'
        exp_reg_right = 'ACCAGGACCAGGGACCAGATTTCCACTGACTTTTGGGTGGTGCTTCAAGCTAG' \
                         'TACCAGTTGACCCAGGGGAAGTAGAAGAGGCCAACGAAGGAGAAGAC'

        seq = self.hiv_triplets[0].sequences[2]
        res_reg_left, res_reg_right = Chimaera.get_window_positions(seq, 0, 200)

        self.assertEqual(exp_reg_left, ''.join(res_reg_left))
        self.assertEqual(exp_reg_right, ''.join(res_reg_right))

    def test_compute_contingency_table_short(self):
        reg_left = 'ATGCT'
        reg_right = 'GACGA'
        half_win_size = 5

        expected = [[1, 4, 5],
                    [1, 4, 5],
                    [2, 8, 10]]
        result = Chimaera.compute_contingency_table(reg_left, reg_right, half_win_size)
        self.assertEqual(expected, result)

    def test_compute_contingency_table_long(self):
        reg_left = 'AAAAACCTCTACTCGGACGCGCTGCGCGTTTGAAGTCGCCGCGCGCGATC'
        reg_right = 'AAGGCGCGGGAGTGACTTATTTAGAGCCGTCCGCCAGCCAAATCGGGCAT'
        half_win_size = 50

        expected = [[1, 49, 50],
                    [1, 49, 50],
                    [2, 98, 100]]
        result = Chimaera.compute_contingency_table(reg_left, reg_right, half_win_size)
        self.assertEqual(expected, result)

    def test_compute_contingency_table_hiv(self):
        reg_left = 'GAATTCTGGAAGGGTTAATTTACTCTAAGAAAAGGCAAGAGATCCTTGATTTGTGGGTCTATCACACACAAGGCTACTTCCCTGATTGGCACAACTACAC'
        reg_right = 'ACCAGGACCAGGGACCAGATTTCCACTGACTTTTGGGTGGTGCTTCAAGCTAGTACCAGTTGACCCAGGGGAAGTAGAAGAGGCCAACGAAGGAGAAGAC'
        half_win_size = 100

        expected = [[1, 99, 100], [1, 99, 100], [2, 198, 200]]
        result = Chimaera.compute_contingency_table(reg_left, reg_right, half_win_size)
        self.assertEqual(expected, result)

    def test_execute_short(self):
        expected = {('A', 'B', 'C'): [],
                    ('A', 'B', 'D'): [],
                    ('A', 'B', 'E'): [],
                    ('A', 'C', 'D'): [],
                    ('A', 'C', 'E'): [],
                    ('A', 'D', 'E'): [],
                    ('B', 'C', 'A'): [],
                    ('B', 'C', 'D'): [],
                    ('B', 'C', 'E'): [],
                    ('B', 'D', 'A'): [],
                    ('B', 'D', 'E'): [],
                    ('B', 'E', 'A'): [],
                    ('C', 'B', 'A'): [],
                    ('C', 'D', 'A'): [],
                    ('C', 'D', 'B'): [],
                    ('C', 'D', 'E'): [],
                    ('C', 'E', 'A'): [],
                    ('C', 'E', 'B'): [],
                    ('D', 'B', 'A'): [],
                    ('D', 'C', 'A'): [],
                    ('D', 'C', 'B'): [],
                    ('D', 'E', 'A'): [],
                    ('D', 'E', 'B'): [],
                    ('D', 'E', 'C'): [],
                    ('E', 'B', 'A'): [],
                    ('E', 'C', 'A'): [],
                    ('E', 'C', 'B'): [],
                    ('E', 'D', 'A'): [],
                    ('E', 'D', 'B'): [],
                    ('E', 'D', 'C'): []}
        result = self.test_short.execute(self.short_triplets)
        self.assertEqual(expected, result)

    def test_execute_long(self):
        expected = {('Test1 ', 'Test2', 'Test3'): [],
                    ('Test1 ', 'Test2', 'Test4'): [],
                    ('Test1 ', 'Test3', 'Test4'): [],
                    ('Test2', 'Test3', 'Test1 '): [],
                    ('Test2', 'Test3', 'Test4'): [(187, 228, 1.0),
                                                  (203, 244, 1.0),
                                                  (202, 243, 1.0),
                                                  (201, 242, 1.0)],
                    ('Test2', 'Test4', 'Test1 '): [],
                    ('Test3', 'Test2', 'Test1 '): [],
                    ('Test3', 'Test4', 'Test1 '): [],
                    ('Test3', 'Test4', 'Test2'): [(187, 228, 1.0),
                                                  (203, 244, 1.0),
                                                  (202, 243, 1.0),
                                                  (201, 242, 1.0)],
                    ('Test4', 'Test2', 'Test1 '): [],
                    ('Test4', 'Test3', 'Test1 '): [],
                    ('Test4', 'Test3', 'Test2'): [(187, 228, 1.0),
                                                  (203, 244, 1.0),
                                                  (202, 243, 1.0),
                                                  (201, 242, 1.0)]}
        result = self.test_long.execute(self.long_triplets)
        self.assertEqual(expected, result)

    def test_execute_hiv(self):
        self.maxDiff = None
        expected = {('B', 'C', '07_BC'): [(458, 509, 2.2878135804039748e-09), (458, 509, 2.2878135804039748e-09), (458, 509, 2.2878135804039748e-09), (458, 509, 1.2570969151079302e-08), (457, 508, 1.2570969151079302e-08), (600, 651, 1.0), (594, 645, 1.0), (590, 641, 1.0), (587, 638, 1.0), (585, 636, 1.0), (584, 635, 1.0), (582, 633, 1.0), (581, 632, 1.0), (580, 631, 1.0), (579, 630, 1.0), (578, 629, 1.0), (577, 628, 1.0), (576, 627, 1.0), (575, 626, 1.0), (574, 625, 1.0), (573, 624, 1.0), (572, 623, 1.0), (571, 622, 1.0), (570, 621, 1.0), (569, 620, 1.0), (568, 619, 1.0), (567, 618, 1.0), (566, 617, 1.0), (565, 616, 1.0), (564, 615, 1.0), (563, 614, 1.0), (562, 613, 1.0), (561, 612, 1.0), (560, 611, 1.0), (559, 610, 1.0), (558, 609, 1.0), (557, 608, 1.0), (556, 607, 1.0), (555, 606, 1.0), (554, 605, 1.0), (553, 604, 1.0), (552, 603, 1.0), (551, 602, 1.0), (550, 601, 1.0), (549, 600, 1.0), (548, 599, 1.0), (2377, 2428, 1.0), (2375, 2426, 1.0), (2372, 2423, 1.0), (2998, 3049, 1.0), (2370, 2421, 1.0), (3024, 3075, 1.0), (2368, 2419, 1.0), (2365, 2416, 1.0), (3021, 3072, 1.0), (2363, 2414, 1.0), (2361, 2412, 1.0), (2358, 2409, 1.0), (2356, 2407, 1.0), (3082, 3133, 1.0), (2354, 2405, 1.0), (2351, 2402, 1.0), (3020, 3071, 1.0), (2349, 2400, 1.0), (2346, 2397, 1.0), (2344, 2395, 1.0), (3110, 3161, 1.0), (2342, 2393, 1.0), (3125, 3176, 1.0), (2339, 2390, 1.0), (3124, 3175, 1.0), (2337, 2388, 1.0), (2334, 2385, 1.0), (2332, 2383, 1.0), (2330, 2381, 1.0), (2327, 2378, 1.0), (2325, 2376, 1.0), (2323, 2374, 1.0), (2320, 2371, 1.0), (3123, 3174, 1.0), (2318, 2369, 1.0), (2315, 2366, 1.0), (2313, 2364, 1.0), (2311, 2362, 1.0), (2308, 2359, 1.0), (2306, 2357, 1.0), (2303, 2354, 1.0), (2301, 2352, 1.0), (2299, 2350, 1.0), (2296, 2347, 1.0), (3270, 3321, 1.0), (2294, 2345, 1.0), (2292, 2343, 1.0), (2289, 2340, 1.0), (3267, 3318, 1.0), (3317, 3368, 1.0), (2287, 2338, 1.0), (3261, 3312, 1.0), (3316, 3367, 1.0), (2284, 2335, 1.0), (3255, 3306, 1.0), (2282, 2333, 1.0), (3249, 3300, 1.0), (2280, 2331, 1.0), (3243, 3294, 1.0), (2277, 2328, 1.0), (3240, 3291, 1.0), (3346, 3397, 1.0), (2275, 2326, 1.0), (3238, 3289, 1.0), (3345, 3396, 1.0), (2272, 2323, 1.0), (3237, 3288, 1.0), (2270, 2321, 1.0), (3236, 3287, 1.0), (2268, 2319, 1.0), (3235, 3286, 1.0), (3344, 3395, 1.0), (2265, 2316, 1.0), (3234, 3285, 1.0), (2263, 2314, 1.0), (3233, 3284, 1.0), (2260, 2311, 1.0), (2258, 2309, 1.0), (3232, 3283, 1.0), (2256, 2307, 1.0), (3022, 3073, 1.0), (2253, 2304, 1.0), (3231, 3282, 1.0), (2251, 2302, 1.0), (2248, 2299, 1.0), (3230, 3281, 1.0), (2246, 2297, 1.0), (2244, 2295, 1.0), (2241, 2292, 1.0), (3229, 3280, 1.0), (2239, 2290, 1.0), (2236, 2287, 1.0), (2234, 2285, 1.0), (2232, 2283, 1.0), (3228, 3279, 1.0), (3315, 3366, 1.0), (2229, 2280, 1.0), (2227, 2278, 1.0), (2224, 2275, 1.0), (2222, 2273, 1.0), (3227, 3278, 1.0), (2220, 2271, 1.0), (2217, 2268, 1.0), (2215, 2266, 1.0), (2212, 2263, 1.0), (3023, 3074, 1.0), (2210, 2261, 1.0), (3314, 3365, 1.0), (2208, 2259, 1.0), (3226, 3277, 1.0), (2205, 2256, 1.0), (2203, 2254, 1.0), (2200, 2251, 1.0), (2198, 2249, 1.0), (2195, 2246, 1.0), (2193, 2244, 1.0), (3313, 3364, 1.0), (2191, 2242, 1.0), (2189, 2240, 1.0), (3225, 3276, 1.0), (2187, 2238, 1.0), (2185, 2236, 1.0), (2183, 2234, 1.0), (3312, 3363, 1.0), (2182, 2233, 1.0), (3126, 3177, 1.0), (2181, 2232, 1.0), (2179, 2230, 1.0), (2178, 2229, 1.0), (3311, 3362, 1.0), (2176, 2227, 1.0), (2175, 2226, 1.0), (3127, 3178, 1.0), (3310, 3361, 1.0), (2174, 2225, 1.0), (2173, 2224, 1.0), (3224, 3275, 1.0), (3309, 3360, 1.0), (2171, 2222, 1.0), (3128, 3179, 1.0), (2170, 2221, 1.0), (3670, 3721, 1.0), (2169, 2220, 1.0), (2168, 2219, 1.0), (3129, 3180, 1.0), (3712, 3763, 1.0), (2167, 2218, 1.0), (3130, 3181, 1.0), (3662, 3713, 1.0), (2166, 2217, 1.0), (3656, 3707, 1.0), (3709, 3760, 1.0), (2164, 2215, 1.0), (3650, 3701, 1.0), (3708, 3759, 1.0), (2163, 2214, 1.0), (3644, 3695, 1.0), (2162, 2213, 1.0), (3638, 3689, 1.0), (2161, 2212, 1.0), (3632, 3683, 1.0), (2160, 2211, 1.0), (3626, 3677, 1.0), (3707, 3758, 1.0), (2159, 2210, 1.0), (3620, 3671, 1.0), (2158, 2209, 1.0), (3614, 3665, 1.0), (2157, 2208, 1.0), (3608, 3659, 1.0), (2156, 2207, 1.0), (3602, 3653, 1.0), (2155, 2206, 1.0), (3596, 3647, 1.0), (2154, 2205, 1.0), (3590, 3641, 1.0), (2153, 2204, 1.0), (3223, 3274, 1.0), (3584, 3635, 1.0), (2152, 2203, 1.0), (3578, 3629, 1.0), (2151, 2202, 1.0), (3575, 3626, 1.0), (2150, 2201, 1.0), (3573, 3624, 1.0), (2149, 2200, 1.0), (3571, 3622, 1.0), (2148, 2199, 1.0), (3569, 3620, 1.0), (3568, 3619, 1.0), (2147, 2198, 1.0), (3567, 3618, 1.0), (2146, 2197, 1.0), (3565, 3616, 1.0), (2145, 2196, 1.0), (3564, 3615, 1.0), (3898, 3949, 1.0), (2144, 2195, 1.0), (3563, 3614, 1.0), (2143, 2194, 1.0), (3562, 3613, 1.0), (2142, 2193, 1.0), (3561, 3612, 1.0), (2141, 2192, 1.0), (3560, 3611, 1.0), (3559, 3610, 1.0), (3897, 3948, 1.0), (2140, 2191, 1.0), (3558, 3609, 1.0), (3891, 3942, 1.0), (2139, 2190, 1.0), (3885, 3936, 1.0), (2138, 2189, 1.0), (3557, 3608, 1.0), (3879, 3930, 1.0), (2137, 2188, 1.0), (3556, 3607, 1.0), (3873, 3924, 1.0), (2136, 2187, 1.0), (3555, 3606, 1.0), (3867, 3918, 1.0), (2135, 2186, 1.0), (3861, 3912, 1.0), (3554, 3605, 1.0), (3858, 3909, 1.0), (2134, 2185, 1.0), (3553, 3604, 1.0), (3856, 3907, 1.0), (2133, 2184, 1.0), (3855, 3906, 1.0), (2132, 2183, 1.0), (3552, 3603, 1.0), (3853, 3904, 1.0), (3852, 3903, 1.0), (2131, 2182, 1.0), (3551, 3602, 1.0), (3851, 3902, 1.0), (2130, 2181, 1.0), (2129, 2180, 1.0), (3550, 3601, 1.0), (3850, 3901, 1.0), (3849, 3900, 1.0), (2128, 2179, 1.0), (3549, 3600, 1.0), (3848, 3899, 1.0), (2127, 2178, 1.0), (2126, 2177, 1.0), (3548, 3599, 1.0), (3847, 3898, 1.0), (3222, 3273, 1.0), (2125, 2176, 1.0), (3846, 3897, 1.0), (2124, 2175, 1.0), (3547, 3598, 1.0), (2123, 2174, 1.0), (3845, 3896, 1.0), (3546, 3597, 1.0), (2122, 2173, 1.0), (3706, 3757, 1.0), (3844, 3895, 1.0), (2121, 2172, 1.0), (3545, 3596, 1.0), (2120, 2171, 1.0), (3843, 3894, 1.0), (2119, 2170, 1.0), (3544, 3595, 1.0), (2118, 2169, 1.0), (2117, 2168, 1.0), (3842, 3893, 1.0), (2116, 2167, 1.0), (3543, 3594, 1.0), (2115, 2166, 1.0), (3841, 3892, 1.0), (2114, 2165, 1.0), (3542, 3593, 1.0), (2113, 2164, 1.0), (2112, 2163, 1.0), (3840, 3891, 1.0), (2111, 2162, 1.0), (3541, 3592, 1.0), (2110, 2161, 1.0), (2109, 2160, 1.0), (3540, 3591, 1.0), (3839, 3890, 1.0), (2108, 2159, 1.0), (2107, 2158, 1.0), (2106, 2157, 1.0), (3539, 3590, 1.0), (2105, 2156, 1.0), (3838, 3889, 1.0), (2104, 2155, 1.0), (2103, 2154, 1.0), (3538, 3589, 1.0), (2102, 2153, 1.0), (2101, 2152, 1.0), (2100, 2151, 1.0), (3537, 3588, 1.0), (3837, 3888, 1.0), (2099, 2150, 1.0), (2098, 2149, 1.0), (2097, 2148, 1.0), (2096, 2147, 1.0), (3536, 3587, 1.0), (2095, 2146, 1.0), (2094, 2145, 1.0), (3836, 3887, 1.0), (2093, 2144, 1.0), (2092, 2143, 1.0), (3535, 3586, 1.0), (2091, 2142, 1.0), (2090, 2141, 1.0), (2089, 2140, 1.0), (2088, 2139, 1.0), (3534, 3585, 1.0), (3835, 3886, 1.0), (2087, 2138, 1.0), (2086, 2137, 1.0), (2085, 2136, 1.0), (4591, 4642, 1.0), (4589, 4640, 1.0), (2084, 2135, 1.0), (4588, 4639, 1.0), (4722, 4773, 1.0), (3533, 3584, 1.0), (4587, 4638, 1.0), (2083, 2134, 1.0), (4586, 4637, 1.0), (4739, 4790, 1.0), (4584, 4635, 1.0), (4737, 4788, 1.0), (2082, 2133, 1.0), (4583, 4634, 1.0), (4770, 4821, 1.0), (4582, 4633, 1.0), (4812, 4863, 1.0), (2081, 2132, 1.0), (4580, 4631, 1.0), (4579, 4630, 1.0), (4736, 4787, 1.0), (2080, 2131, 1.0), (3834, 3885, 1.0), (4578, 4629, 1.0), (4576, 4627, 1.0), (4811, 4862, 1.0), (2079, 2130, 1.0), (4575, 4626, 1.0), (4574, 4625, 1.0), (2078, 2129, 1.0), (3532, 3583, 1.0), (4572, 4623, 1.0), (4571, 4622, 1.0), (4569, 4620, 1.0), (2077, 2128, 1.0), (4568, 4619, 1.0), (3019, 3070, 1.0), (4566, 4617, 1.0), (2076, 2127, 1.0), (3221, 3272, 1.0), (4565, 4616, 1.0), (4810, 4861, 1.0), (4563, 4614, 1.0), (4562, 4613, 1.0), (2075, 2126, 1.0), (4560, 4611, 1.0), (4559, 4610, 1.0), (2074, 2125, 1.0), (3705, 3756, 1.0), (4557, 4608, 1.0), (4556, 4607, 1.0), (2073, 2124, 1.0), (4552, 4603, 1.0), (3531, 3582, 1.0), (4546, 4597, 1.0), (2072, 2123, 1.0), (3018, 3069, 1.0), (4540, 4591, 1.0), (4534, 4585, 1.0), (5041, 5092, 1.0), (2071, 2122, 1.0), (4528, 4579, 1.0), (5128, 5179, 1.0), (3833, 3884, 1.0), (4522, 4573, 1.0), (5127, 5178, 1.0), (3704, 3755, 1.0), (4516, 4567, 1.0), (2070, 2121, 1.0), (4510, 4561, 1.0), (3703, 3754, 1.0), (4504, 4555, 1.0), (5126, 5177, 1.0), (3017, 3068, 1.0), (4498, 4549, 1.0), (2069, 2120, 1.0), (4492, 4543, 1.0), (4486, 4537, 1.0), (5160, 5211, 1.0), (4480, 4531, 1.0), (5159, 5210, 1.0), (2068, 2119, 1.0), (4474, 4525, 1.0), (4468, 4519, 1.0), (5040, 5091, 1.0), (5158, 5209, 1.0), (2067, 2118, 1.0), (4462, 4513, 1.0), (5034, 5085, 1.0), (3016, 3067, 1.0), (3530, 3581, 1.0), (4456, 4507, 1.0), (5028, 5079, 1.0), (2066, 2117, 1.0), (4450, 4501, 1.0), (5022, 5073, 1.0), (4445, 4496, 1.0), (5016, 5067, 1.0), (4443, 4494, 1.0), (5010, 5061, 1.0), (2065, 2116, 1.0), (4440, 4491, 1.0), (5007, 5058, 1.0), (5125, 5176, 1.0), (4438, 4489, 1.0), (5005, 5056, 1.0), (3015, 3066, 1.0), (4436, 4487, 1.0), (5003, 5054, 1.0), (2064, 2115, 1.0), (4434, 4485, 1.0), (5002, 5053, 1.0), (2063, 2114, 1.0), (4432, 4483, 1.0), (4738, 4789, 1.0), (5001, 5052, 1.0), (4431, 4482, 1.0), (5000, 5051, 1.0), (5124, 5175, 1.0), (2062, 2113, 1.0), (4429, 4480, 1.0), (2061, 2112, 1.0), (3014, 3065, 1.0), (4428, 4479, 1.0), (4999, 5050, 1.0), (2060, 2111, 1.0), (4426, 4477, 1.0), (4998, 5049, 1.0), (4425, 4476, 1.0), (2059, 2110, 1.0), (3013, 3064, 1.0), (4424, 4475, 1.0), (4809, 4860, 1.0), (4997, 5048, 1.0), (5123, 5174, 1.0)], ('C', '07_BC', 'B'): [(458, 509, 2.2878135804039748e-09), (458, 509, 2.2878135804039748e-09), (458, 509, 2.2878135804039748e-09), (458, 509, 1.2570969151079302e-08), (457, 508, 1.2570969151079302e-08), (600, 651, 1.0), (594, 645, 1.0), (590, 641, 1.0), (587, 638, 1.0), (585, 636, 1.0), (584, 635, 1.0), (582, 633, 1.0), (581, 632, 1.0), (580, 631, 1.0), (579, 630, 1.0), (578, 629, 1.0), (577, 628, 1.0), (576, 627, 1.0), (575, 626, 1.0), (574, 625, 1.0), (573, 624, 1.0), (572, 623, 1.0), (571, 622, 1.0), (570, 621, 1.0), (569, 620, 1.0), (568, 619, 1.0), (567, 618, 1.0), (566, 617, 1.0), (565, 616, 1.0), (564, 615, 1.0), (563, 614, 1.0), (562, 613, 1.0), (561, 612, 1.0), (560, 611, 1.0), (559, 610, 1.0), (558, 609, 1.0), (557, 608, 1.0), (556, 607, 1.0), (555, 606, 1.0), (554, 605, 1.0), (553, 604, 1.0), (552, 603, 1.0), (551, 602, 1.0), (550, 601, 1.0), (549, 600, 1.0), (548, 599, 1.0), (2377, 2428, 1.0), (2375, 2426, 1.0), (2372, 2423, 1.0), (2998, 3049, 1.0), (2370, 2421, 1.0), (3024, 3075, 1.0), (2368, 2419, 1.0), (2365, 2416, 1.0), (3021, 3072, 1.0), (2363, 2414, 1.0), (2361, 2412, 1.0), (2358, 2409, 1.0), (2356, 2407, 1.0), (3082, 3133, 1.0), (2354, 2405, 1.0), (2351, 2402, 1.0), (3020, 3071, 1.0), (2349, 2400, 1.0), (2346, 2397, 1.0), (2344, 2395, 1.0), (3110, 3161, 1.0), (2342, 2393, 1.0), (3125, 3176, 1.0), (2339, 2390, 1.0), (3124, 3175, 1.0), (2337, 2388, 1.0), (2334, 2385, 1.0), (2332, 2383, 1.0), (2330, 2381, 1.0), (2327, 2378, 1.0), (2325, 2376, 1.0), (2323, 2374, 1.0), (2320, 2371, 1.0), (3123, 3174, 1.0), (2318, 2369, 1.0), (2315, 2366, 1.0), (2313, 2364, 1.0), (2311, 2362, 1.0), (2308, 2359, 1.0), (2306, 2357, 1.0), (2303, 2354, 1.0), (2301, 2352, 1.0), (2299, 2350, 1.0), (2296, 2347, 1.0), (3270, 3321, 1.0), (2294, 2345, 1.0), (2292, 2343, 1.0), (2289, 2340, 1.0), (3267, 3318, 1.0), (3317, 3368, 1.0), (2287, 2338, 1.0), (3261, 3312, 1.0), (3316, 3367, 1.0), (2284, 2335, 1.0), (3255, 3306, 1.0), (2282, 2333, 1.0), (3249, 3300, 1.0), (2280, 2331, 1.0), (3243, 3294, 1.0), (2277, 2328, 1.0), (3240, 3291, 1.0), (3346, 3397, 1.0), (2275, 2326, 1.0), (3238, 3289, 1.0), (3345, 3396, 1.0), (2272, 2323, 1.0), (3237, 3288, 1.0), (2270, 2321, 1.0), (3236, 3287, 1.0), (2268, 2319, 1.0), (3235, 3286, 1.0), (3344, 3395, 1.0), (2265, 2316, 1.0), (3234, 3285, 1.0), (2263, 2314, 1.0), (3233, 3284, 1.0), (2260, 2311, 1.0), (2258, 2309, 1.0), (3232, 3283, 1.0), (2256, 2307, 1.0), (3022, 3073, 1.0), (2253, 2304, 1.0), (3231, 3282, 1.0), (2251, 2302, 1.0), (2248, 2299, 1.0), (3230, 3281, 1.0), (2246, 2297, 1.0), (2244, 2295, 1.0), (2241, 2292, 1.0), (3229, 3280, 1.0), (2239, 2290, 1.0), (2236, 2287, 1.0), (2234, 2285, 1.0), (2232, 2283, 1.0), (3228, 3279, 1.0), (3315, 3366, 1.0), (2229, 2280, 1.0), (2227, 2278, 1.0), (2224, 2275, 1.0), (2222, 2273, 1.0), (3227, 3278, 1.0), (2220, 2271, 1.0), (2217, 2268, 1.0), (2215, 2266, 1.0), (2212, 2263, 1.0), (3023, 3074, 1.0), (2210, 2261, 1.0), (3314, 3365, 1.0), (2208, 2259, 1.0), (3226, 3277, 1.0), (2205, 2256, 1.0), (2203, 2254, 1.0), (2200, 2251, 1.0), (2198, 2249, 1.0), (2195, 2246, 1.0), (2193, 2244, 1.0), (3313, 3364, 1.0), (2191, 2242, 1.0), (2189, 2240, 1.0), (3225, 3276, 1.0), (2187, 2238, 1.0), (2185, 2236, 1.0), (2183, 2234, 1.0), (3312, 3363, 1.0), (2182, 2233, 1.0), (3126, 3177, 1.0), (2181, 2232, 1.0), (2179, 2230, 1.0), (2178, 2229, 1.0), (3311, 3362, 1.0), (2176, 2227, 1.0), (2175, 2226, 1.0), (3127, 3178, 1.0), (3310, 3361, 1.0), (2174, 2225, 1.0), (2173, 2224, 1.0), (3224, 3275, 1.0), (3309, 3360, 1.0), (2171, 2222, 1.0), (3128, 3179, 1.0), (2170, 2221, 1.0), (3670, 3721, 1.0), (2169, 2220, 1.0), (2168, 2219, 1.0), (3129, 3180, 1.0), (3712, 3763, 1.0), (2167, 2218, 1.0), (3130, 3181, 1.0), (3662, 3713, 1.0), (2166, 2217, 1.0), (3656, 3707, 1.0), (3709, 3760, 1.0), (2164, 2215, 1.0), (3650, 3701, 1.0), (3708, 3759, 1.0), (2163, 2214, 1.0), (3644, 3695, 1.0), (2162, 2213, 1.0), (3638, 3689, 1.0), (2161, 2212, 1.0), (3632, 3683, 1.0), (2160, 2211, 1.0), (3626, 3677, 1.0), (3707, 3758, 1.0), (2159, 2210, 1.0), (3620, 3671, 1.0), (2158, 2209, 1.0), (3614, 3665, 1.0), (2157, 2208, 1.0), (3608, 3659, 1.0), (2156, 2207, 1.0), (3602, 3653, 1.0), (2155, 2206, 1.0), (3596, 3647, 1.0), (2154, 2205, 1.0), (3590, 3641, 1.0), (2153, 2204, 1.0), (3223, 3274, 1.0), (3584, 3635, 1.0), (2152, 2203, 1.0), (3578, 3629, 1.0), (2151, 2202, 1.0), (3575, 3626, 1.0), (2150, 2201, 1.0), (3573, 3624, 1.0), (2149, 2200, 1.0), (3571, 3622, 1.0), (2148, 2199, 1.0), (3569, 3620, 1.0), (3568, 3619, 1.0), (2147, 2198, 1.0), (3567, 3618, 1.0), (2146, 2197, 1.0), (3565, 3616, 1.0), (2145, 2196, 1.0), (3564, 3615, 1.0), (3898, 3949, 1.0), (2144, 2195, 1.0), (3563, 3614, 1.0), (2143, 2194, 1.0), (3562, 3613, 1.0), (2142, 2193, 1.0), (3561, 3612, 1.0), (2141, 2192, 1.0), (3560, 3611, 1.0), (3559, 3610, 1.0), (3897, 3948, 1.0), (2140, 2191, 1.0), (3558, 3609, 1.0), (3891, 3942, 1.0), (2139, 2190, 1.0), (3885, 3936, 1.0), (2138, 2189, 1.0), (3557, 3608, 1.0), (3879, 3930, 1.0), (2137, 2188, 1.0), (3556, 3607, 1.0), (3873, 3924, 1.0), (2136, 2187, 1.0), (3555, 3606, 1.0), (3867, 3918, 1.0), (2135, 2186, 1.0), (3861, 3912, 1.0), (3554, 3605, 1.0), (3858, 3909, 1.0), (2134, 2185, 1.0), (3553, 3604, 1.0), (3856, 3907, 1.0), (2133, 2184, 1.0), (3855, 3906, 1.0), (2132, 2183, 1.0), (3552, 3603, 1.0), (3853, 3904, 1.0), (3852, 3903, 1.0), (2131, 2182, 1.0), (3551, 3602, 1.0), (3851, 3902, 1.0), (2130, 2181, 1.0), (2129, 2180, 1.0), (3550, 3601, 1.0), (3850, 3901, 1.0), (3849, 3900, 1.0), (2128, 2179, 1.0), (3549, 3600, 1.0), (3848, 3899, 1.0), (2127, 2178, 1.0), (2126, 2177, 1.0), (3548, 3599, 1.0), (3847, 3898, 1.0), (3222, 3273, 1.0), (2125, 2176, 1.0), (3846, 3897, 1.0), (2124, 2175, 1.0), (3547, 3598, 1.0), (2123, 2174, 1.0), (3845, 3896, 1.0), (3546, 3597, 1.0), (2122, 2173, 1.0), (3706, 3757, 1.0), (3844, 3895, 1.0), (2121, 2172, 1.0), (3545, 3596, 1.0), (2120, 2171, 1.0), (3843, 3894, 1.0), (2119, 2170, 1.0), (3544, 3595, 1.0), (2118, 2169, 1.0), (2117, 2168, 1.0), (3842, 3893, 1.0), (2116, 2167, 1.0), (3543, 3594, 1.0), (2115, 2166, 1.0), (3841, 3892, 1.0), (2114, 2165, 1.0), (3542, 3593, 1.0), (2113, 2164, 1.0), (2112, 2163, 1.0), (3840, 3891, 1.0), (2111, 2162, 1.0), (3541, 3592, 1.0), (2110, 2161, 1.0), (2109, 2160, 1.0), (3540, 3591, 1.0), (3839, 3890, 1.0), (2108, 2159, 1.0), (2107, 2158, 1.0), (2106, 2157, 1.0), (3539, 3590, 1.0), (2105, 2156, 1.0), (3838, 3889, 1.0), (2104, 2155, 1.0), (2103, 2154, 1.0), (3538, 3589, 1.0), (2102, 2153, 1.0), (2101, 2152, 1.0), (2100, 2151, 1.0), (3537, 3588, 1.0), (3837, 3888, 1.0), (2099, 2150, 1.0), (2098, 2149, 1.0), (2097, 2148, 1.0), (2096, 2147, 1.0), (3536, 3587, 1.0), (2095, 2146, 1.0), (2094, 2145, 1.0), (3836, 3887, 1.0), (2093, 2144, 1.0), (2092, 2143, 1.0), (3535, 3586, 1.0), (2091, 2142, 1.0), (2090, 2141, 1.0), (2089, 2140, 1.0), (2088, 2139, 1.0), (3534, 3585, 1.0), (3835, 3886, 1.0), (2087, 2138, 1.0), (2086, 2137, 1.0), (2085, 2136, 1.0), (4591, 4642, 1.0), (4589, 4640, 1.0), (2084, 2135, 1.0), (4588, 4639, 1.0), (4722, 4773, 1.0), (3533, 3584, 1.0), (4587, 4638, 1.0), (2083, 2134, 1.0), (4586, 4637, 1.0), (4739, 4790, 1.0), (4584, 4635, 1.0), (4737, 4788, 1.0), (2082, 2133, 1.0), (4583, 4634, 1.0), (4770, 4821, 1.0), (4582, 4633, 1.0), (4812, 4863, 1.0), (2081, 2132, 1.0), (4580, 4631, 1.0), (4579, 4630, 1.0), (4736, 4787, 1.0), (2080, 2131, 1.0), (3834, 3885, 1.0), (4578, 4629, 1.0), (4576, 4627, 1.0), (4811, 4862, 1.0), (2079, 2130, 1.0), (4575, 4626, 1.0), (4574, 4625, 1.0), (2078, 2129, 1.0), (3532, 3583, 1.0), (4572, 4623, 1.0), (4571, 4622, 1.0), (4569, 4620, 1.0), (2077, 2128, 1.0), (4568, 4619, 1.0), (3019, 3070, 1.0), (4566, 4617, 1.0), (2076, 2127, 1.0), (3221, 3272, 1.0), (4565, 4616, 1.0), (4810, 4861, 1.0), (4563, 4614, 1.0), (4562, 4613, 1.0), (2075, 2126, 1.0), (4560, 4611, 1.0), (4559, 4610, 1.0), (2074, 2125, 1.0), (3705, 3756, 1.0), (4557, 4608, 1.0), (4556, 4607, 1.0), (2073, 2124, 1.0), (4552, 4603, 1.0), (3531, 3582, 1.0), (4546, 4597, 1.0), (2072, 2123, 1.0), (3018, 3069, 1.0), (4540, 4591, 1.0), (4534, 4585, 1.0), (5041, 5092, 1.0), (2071, 2122, 1.0), (4528, 4579, 1.0), (5128, 5179, 1.0), (3833, 3884, 1.0), (4522, 4573, 1.0), (5127, 5178, 1.0), (3704, 3755, 1.0), (4516, 4567, 1.0), (2070, 2121, 1.0), (4510, 4561, 1.0), (3703, 3754, 1.0), (4504, 4555, 1.0), (5126, 5177, 1.0), (3017, 3068, 1.0), (4498, 4549, 1.0), (2069, 2120, 1.0), (4492, 4543, 1.0), (4486, 4537, 1.0), (5160, 5211, 1.0), (4480, 4531, 1.0), (5159, 5210, 1.0), (2068, 2119, 1.0), (4474, 4525, 1.0), (4468, 4519, 1.0), (5040, 5091, 1.0), (5158, 5209, 1.0), (2067, 2118, 1.0), (4462, 4513, 1.0), (5034, 5085, 1.0), (3016, 3067, 1.0), (3530, 3581, 1.0), (4456, 4507, 1.0), (5028, 5079, 1.0), (2066, 2117, 1.0), (4450, 4501, 1.0), (5022, 5073, 1.0), (4445, 4496, 1.0), (5016, 5067, 1.0), (4443, 4494, 1.0), (5010, 5061, 1.0), (2065, 2116, 1.0), (4440, 4491, 1.0), (5007, 5058, 1.0), (5125, 5176, 1.0), (4438, 4489, 1.0), (5005, 5056, 1.0), (3015, 3066, 1.0), (4436, 4487, 1.0), (5003, 5054, 1.0), (2064, 2115, 1.0), (4434, 4485, 1.0), (5002, 5053, 1.0), (2063, 2114, 1.0), (4432, 4483, 1.0), (4738, 4789, 1.0), (5001, 5052, 1.0), (4431, 4482, 1.0), (5000, 5051, 1.0), (5124, 5175, 1.0), (2062, 2113, 1.0), (4429, 4480, 1.0), (2061, 2112, 1.0), (3014, 3065, 1.0), (4428, 4479, 1.0), (4999, 5050, 1.0), (2060, 2111, 1.0), (4426, 4477, 1.0), (4998, 5049, 1.0), (4425, 4476, 1.0), (2059, 2110, 1.0), (3013, 3064, 1.0), (4424, 4475, 1.0), (4809, 4860, 1.0), (4997, 5048, 1.0), (5123, 5174, 1.0)], ('07_BC', 'C', 'B'): [(458, 509, 2.2878135804039748e-09), (458, 509, 2.2878135804039748e-09), (458, 509, 2.2878135804039748e-09), (458, 509, 1.2570969151079302e-08), (457, 508, 1.2570969151079302e-08), (600, 651, 1.0), (594, 645, 1.0), (590, 641, 1.0), (587, 638, 1.0), (585, 636, 1.0), (584, 635, 1.0), (582, 633, 1.0), (581, 632, 1.0), (580, 631, 1.0), (579, 630, 1.0), (578, 629, 1.0), (577, 628, 1.0), (576, 627, 1.0), (575, 626, 1.0), (574, 625, 1.0), (573, 624, 1.0), (572, 623, 1.0), (571, 622, 1.0), (570, 621, 1.0), (569, 620, 1.0), (568, 619, 1.0), (567, 618, 1.0), (566, 617, 1.0), (565, 616, 1.0), (564, 615, 1.0), (563, 614, 1.0), (562, 613, 1.0), (561, 612, 1.0), (560, 611, 1.0), (559, 610, 1.0), (558, 609, 1.0), (557, 608, 1.0), (556, 607, 1.0), (555, 606, 1.0), (554, 605, 1.0), (553, 604, 1.0), (552, 603, 1.0), (551, 602, 1.0), (550, 601, 1.0), (549, 600, 1.0), (548, 599, 1.0), (2377, 2428, 1.0), (2375, 2426, 1.0), (2372, 2423, 1.0), (2998, 3049, 1.0), (2370, 2421, 1.0), (3024, 3075, 1.0), (2368, 2419, 1.0), (2365, 2416, 1.0), (3021, 3072, 1.0), (2363, 2414, 1.0), (2361, 2412, 1.0), (2358, 2409, 1.0), (2356, 2407, 1.0), (3082, 3133, 1.0), (2354, 2405, 1.0), (2351, 2402, 1.0), (3020, 3071, 1.0), (2349, 2400, 1.0), (2346, 2397, 1.0), (2344, 2395, 1.0), (3110, 3161, 1.0), (2342, 2393, 1.0), (3125, 3176, 1.0), (2339, 2390, 1.0), (3124, 3175, 1.0), (2337, 2388, 1.0), (2334, 2385, 1.0), (2332, 2383, 1.0), (2330, 2381, 1.0), (2327, 2378, 1.0), (2325, 2376, 1.0), (2323, 2374, 1.0), (2320, 2371, 1.0), (3123, 3174, 1.0), (2318, 2369, 1.0), (2315, 2366, 1.0), (2313, 2364, 1.0), (2311, 2362, 1.0), (2308, 2359, 1.0), (2306, 2357, 1.0), (2303, 2354, 1.0), (2301, 2352, 1.0), (2299, 2350, 1.0), (2296, 2347, 1.0), (3270, 3321, 1.0), (2294, 2345, 1.0), (2292, 2343, 1.0), (2289, 2340, 1.0), (3267, 3318, 1.0), (3317, 3368, 1.0), (2287, 2338, 1.0), (3261, 3312, 1.0), (3316, 3367, 1.0), (2284, 2335, 1.0), (3255, 3306, 1.0), (2282, 2333, 1.0), (3249, 3300, 1.0), (2280, 2331, 1.0), (3243, 3294, 1.0), (2277, 2328, 1.0), (3240, 3291, 1.0), (3346, 3397, 1.0), (2275, 2326, 1.0), (3238, 3289, 1.0), (3345, 3396, 1.0), (2272, 2323, 1.0), (3237, 3288, 1.0), (2270, 2321, 1.0), (3236, 3287, 1.0), (2268, 2319, 1.0), (3235, 3286, 1.0), (3344, 3395, 1.0), (2265, 2316, 1.0), (3234, 3285, 1.0), (2263, 2314, 1.0), (3233, 3284, 1.0), (2260, 2311, 1.0), (2258, 2309, 1.0), (3232, 3283, 1.0), (2256, 2307, 1.0), (3022, 3073, 1.0), (2253, 2304, 1.0), (3231, 3282, 1.0), (2251, 2302, 1.0), (2248, 2299, 1.0), (3230, 3281, 1.0), (2246, 2297, 1.0), (2244, 2295, 1.0), (2241, 2292, 1.0), (3229, 3280, 1.0), (2239, 2290, 1.0), (2236, 2287, 1.0), (2234, 2285, 1.0), (2232, 2283, 1.0), (3228, 3279, 1.0), (3315, 3366, 1.0), (2229, 2280, 1.0), (2227, 2278, 1.0), (2224, 2275, 1.0), (2222, 2273, 1.0), (3227, 3278, 1.0), (2220, 2271, 1.0), (2217, 2268, 1.0), (2215, 2266, 1.0), (2212, 2263, 1.0), (3023, 3074, 1.0), (2210, 2261, 1.0), (3314, 3365, 1.0), (2208, 2259, 1.0), (3226, 3277, 1.0), (2205, 2256, 1.0), (2203, 2254, 1.0), (2200, 2251, 1.0), (2198, 2249, 1.0), (2195, 2246, 1.0), (2193, 2244, 1.0), (3313, 3364, 1.0), (2191, 2242, 1.0), (2189, 2240, 1.0), (3225, 3276, 1.0), (2187, 2238, 1.0), (2185, 2236, 1.0), (2183, 2234, 1.0), (3312, 3363, 1.0), (2182, 2233, 1.0), (3126, 3177, 1.0), (2181, 2232, 1.0), (2179, 2230, 1.0), (2178, 2229, 1.0), (3311, 3362, 1.0), (2176, 2227, 1.0), (2175, 2226, 1.0), (3127, 3178, 1.0), (3310, 3361, 1.0), (2174, 2225, 1.0), (2173, 2224, 1.0), (3224, 3275, 1.0), (3309, 3360, 1.0), (2171, 2222, 1.0), (3128, 3179, 1.0), (2170, 2221, 1.0), (3670, 3721, 1.0), (2169, 2220, 1.0), (2168, 2219, 1.0), (3129, 3180, 1.0), (3712, 3763, 1.0), (2167, 2218, 1.0), (3130, 3181, 1.0), (3662, 3713, 1.0), (2166, 2217, 1.0), (3656, 3707, 1.0), (3709, 3760, 1.0), (2164, 2215, 1.0), (3650, 3701, 1.0), (3708, 3759, 1.0), (2163, 2214, 1.0), (3644, 3695, 1.0), (2162, 2213, 1.0), (3638, 3689, 1.0), (2161, 2212, 1.0), (3632, 3683, 1.0), (2160, 2211, 1.0), (3626, 3677, 1.0), (3707, 3758, 1.0), (2159, 2210, 1.0), (3620, 3671, 1.0), (2158, 2209, 1.0), (3614, 3665, 1.0), (2157, 2208, 1.0), (3608, 3659, 1.0), (2156, 2207, 1.0), (3602, 3653, 1.0), (2155, 2206, 1.0), (3596, 3647, 1.0), (2154, 2205, 1.0), (3590, 3641, 1.0), (2153, 2204, 1.0), (3223, 3274, 1.0), (3584, 3635, 1.0), (2152, 2203, 1.0), (3578, 3629, 1.0), (2151, 2202, 1.0), (3575, 3626, 1.0), (2150, 2201, 1.0), (3573, 3624, 1.0), (2149, 2200, 1.0), (3571, 3622, 1.0), (2148, 2199, 1.0), (3569, 3620, 1.0), (3568, 3619, 1.0), (2147, 2198, 1.0), (3567, 3618, 1.0), (2146, 2197, 1.0), (3565, 3616, 1.0), (2145, 2196, 1.0), (3564, 3615, 1.0), (3898, 3949, 1.0), (2144, 2195, 1.0), (3563, 3614, 1.0), (2143, 2194, 1.0), (3562, 3613, 1.0), (2142, 2193, 1.0), (3561, 3612, 1.0), (2141, 2192, 1.0), (3560, 3611, 1.0), (3559, 3610, 1.0), (3897, 3948, 1.0), (2140, 2191, 1.0), (3558, 3609, 1.0), (3891, 3942, 1.0), (2139, 2190, 1.0), (3885, 3936, 1.0), (2138, 2189, 1.0), (3557, 3608, 1.0), (3879, 3930, 1.0), (2137, 2188, 1.0), (3556, 3607, 1.0), (3873, 3924, 1.0), (2136, 2187, 1.0), (3555, 3606, 1.0), (3867, 3918, 1.0), (2135, 2186, 1.0), (3861, 3912, 1.0), (3554, 3605, 1.0), (3858, 3909, 1.0), (2134, 2185, 1.0), (3553, 3604, 1.0), (3856, 3907, 1.0), (2133, 2184, 1.0), (3855, 3906, 1.0), (2132, 2183, 1.0), (3552, 3603, 1.0), (3853, 3904, 1.0), (3852, 3903, 1.0), (2131, 2182, 1.0), (3551, 3602, 1.0), (3851, 3902, 1.0), (2130, 2181, 1.0), (2129, 2180, 1.0), (3550, 3601, 1.0), (3850, 3901, 1.0), (3849, 3900, 1.0), (2128, 2179, 1.0), (3549, 3600, 1.0), (3848, 3899, 1.0), (2127, 2178, 1.0), (2126, 2177, 1.0), (3548, 3599, 1.0), (3847, 3898, 1.0), (3222, 3273, 1.0), (2125, 2176, 1.0), (3846, 3897, 1.0), (2124, 2175, 1.0), (3547, 3598, 1.0), (2123, 2174, 1.0), (3845, 3896, 1.0), (3546, 3597, 1.0), (2122, 2173, 1.0), (3706, 3757, 1.0), (3844, 3895, 1.0), (2121, 2172, 1.0), (3545, 3596, 1.0), (2120, 2171, 1.0), (3843, 3894, 1.0), (2119, 2170, 1.0), (3544, 3595, 1.0), (2118, 2169, 1.0), (2117, 2168, 1.0), (3842, 3893, 1.0), (2116, 2167, 1.0), (3543, 3594, 1.0), (2115, 2166, 1.0), (3841, 3892, 1.0), (2114, 2165, 1.0), (3542, 3593, 1.0), (2113, 2164, 1.0), (2112, 2163, 1.0), (3840, 3891, 1.0), (2111, 2162, 1.0), (3541, 3592, 1.0), (2110, 2161, 1.0), (2109, 2160, 1.0), (3540, 3591, 1.0), (3839, 3890, 1.0), (2108, 2159, 1.0), (2107, 2158, 1.0), (2106, 2157, 1.0), (3539, 3590, 1.0), (2105, 2156, 1.0), (3838, 3889, 1.0), (2104, 2155, 1.0), (2103, 2154, 1.0), (3538, 3589, 1.0), (2102, 2153, 1.0), (2101, 2152, 1.0), (2100, 2151, 1.0), (3537, 3588, 1.0), (3837, 3888, 1.0), (2099, 2150, 1.0), (2098, 2149, 1.0), (2097, 2148, 1.0), (2096, 2147, 1.0), (3536, 3587, 1.0), (2095, 2146, 1.0), (2094, 2145, 1.0), (3836, 3887, 1.0), (2093, 2144, 1.0), (2092, 2143, 1.0), (3535, 3586, 1.0), (2091, 2142, 1.0), (2090, 2141, 1.0), (2089, 2140, 1.0), (2088, 2139, 1.0), (3534, 3585, 1.0), (3835, 3886, 1.0), (2087, 2138, 1.0), (2086, 2137, 1.0), (2085, 2136, 1.0), (4591, 4642, 1.0), (4589, 4640, 1.0), (2084, 2135, 1.0), (4588, 4639, 1.0), (4722, 4773, 1.0), (3533, 3584, 1.0), (4587, 4638, 1.0), (2083, 2134, 1.0), (4586, 4637, 1.0), (4739, 4790, 1.0), (4584, 4635, 1.0), (4737, 4788, 1.0), (2082, 2133, 1.0), (4583, 4634, 1.0), (4770, 4821, 1.0), (4582, 4633, 1.0), (4812, 4863, 1.0), (2081, 2132, 1.0), (4580, 4631, 1.0), (4579, 4630, 1.0), (4736, 4787, 1.0), (2080, 2131, 1.0), (3834, 3885, 1.0), (4578, 4629, 1.0), (4576, 4627, 1.0), (4811, 4862, 1.0), (2079, 2130, 1.0), (4575, 4626, 1.0), (4574, 4625, 1.0), (2078, 2129, 1.0), (3532, 3583, 1.0), (4572, 4623, 1.0), (4571, 4622, 1.0), (4569, 4620, 1.0), (2077, 2128, 1.0), (4568, 4619, 1.0), (3019, 3070, 1.0), (4566, 4617, 1.0), (2076, 2127, 1.0), (3221, 3272, 1.0), (4565, 4616, 1.0), (4810, 4861, 1.0), (4563, 4614, 1.0), (4562, 4613, 1.0), (2075, 2126, 1.0), (4560, 4611, 1.0), (4559, 4610, 1.0), (2074, 2125, 1.0), (3705, 3756, 1.0), (4557, 4608, 1.0), (4556, 4607, 1.0), (2073, 2124, 1.0), (4552, 4603, 1.0), (3531, 3582, 1.0), (4546, 4597, 1.0), (2072, 2123, 1.0), (3018, 3069, 1.0), (4540, 4591, 1.0), (4534, 4585, 1.0), (5041, 5092, 1.0), (2071, 2122, 1.0), (4528, 4579, 1.0), (5128, 5179, 1.0), (3833, 3884, 1.0), (4522, 4573, 1.0), (5127, 5178, 1.0), (3704, 3755, 1.0), (4516, 4567, 1.0), (2070, 2121, 1.0), (4510, 4561, 1.0), (3703, 3754, 1.0), (4504, 4555, 1.0), (5126, 5177, 1.0), (3017, 3068, 1.0), (4498, 4549, 1.0), (2069, 2120, 1.0), (4492, 4543, 1.0), (4486, 4537, 1.0), (5160, 5211, 1.0), (4480, 4531, 1.0), (5159, 5210, 1.0), (2068, 2119, 1.0), (4474, 4525, 1.0), (4468, 4519, 1.0), (5040, 5091, 1.0), (5158, 5209, 1.0), (2067, 2118, 1.0), (4462, 4513, 1.0), (5034, 5085, 1.0), (3016, 3067, 1.0), (3530, 3581, 1.0), (4456, 4507, 1.0), (5028, 5079, 1.0), (2066, 2117, 1.0), (4450, 4501, 1.0), (5022, 5073, 1.0), (4445, 4496, 1.0), (5016, 5067, 1.0), (4443, 4494, 1.0), (5010, 5061, 1.0), (2065, 2116, 1.0), (4440, 4491, 1.0), (5007, 5058, 1.0), (5125, 5176, 1.0), (4438, 4489, 1.0), (5005, 5056, 1.0), (3015, 3066, 1.0), (4436, 4487, 1.0), (5003, 5054, 1.0), (2064, 2115, 1.0), (4434, 4485, 1.0), (5002, 5053, 1.0), (2063, 2114, 1.0), (4432, 4483, 1.0), (4738, 4789, 1.0), (5001, 5052, 1.0), (4431, 4482, 1.0), (5000, 5051, 1.0), (5124, 5175, 1.0), (2062, 2113, 1.0), (4429, 4480, 1.0), (2061, 2112, 1.0), (3014, 3065, 1.0), (4428, 4479, 1.0), (4999, 5050, 1.0), (2060, 2111, 1.0), (4426, 4477, 1.0), (4998, 5049, 1.0), (4425, 4476, 1.0), (2059, 2110, 1.0), (3013, 3064, 1.0), (4424, 4475, 1.0), (4809, 4860, 1.0), (4997, 5048, 1.0), (5123, 5174, 1.0)]}
        result = self.test_hiv.execute(self.hiv_triplets)
        self.assertEqual(expected, result)


if __name__ == '__main__':
    unittest.main()

import unittest
from scripts.main import *


class TestMain(unittest.TestCase):

    def test_convert_fasta(self):
        with open('test.fasta') as test_handle:
            expected = [['Test1 ', 'AAAAACATCCACGCGCACACGCTGTGCGTTTGAAGTCGCCGCACGCGATCAAGGCGCGGCCGCAACCTATCTGGAACCGTCCGCCAGCCAAATCGGGCACAAAGAAAGCATCAAAGACACGGCGCGCGTCTTGGGCAGAATGTACGATGCCATCGAATATCGCGGCTTCGCTCAGGAAACTGTCGAAGAATTGGCAAAATATGCGGGCGTACCCGTGTTCAACGGGCTGACCAACGAGTTCCATCCCACACAAATGCTTGCCGACGCACTGACTATGCGCGAACACAGCGGCAAACCTTTGAACCAAACCGCGTTTGCCTACGTCGGCGACGCGCGTTACAACATGGGCAATTCCCTGCTGATTTTAGGGGCAAAATTGGGGATGGACGTGCGTATCGGCGCACCTCAAAGCCTGTGGCCGTCTGAAGGCATTATCGCCGCCGCACACGCCGCCGCCAAAGAAACCGGTGCAAAAATTACCCTGACCGAAAACGCGCATGAAGCCGTCAAAGGTGTCGGTTTCATTCATACTGACGTATGGGTCAGCATGGGCGAGCCGAAAGAAGTCTGGCAGGAACGCATCGATTTGCTGAAAGATTACCGCGTTACGCCCGAACTGATGGCGGCATCGGGCAATCCGCAAGTCAAATTCATGCACTGCCTGCCCGCCTTCCACAACCGCGAAACCAAAGTCGGCGAATGGATTTACGAAACCTTCGGGCTGAACGGTGTGGAAGTTACAGAAGAAGTATTCGAAAGTCCGGCCGGCATCGTGTTCGATCAGGCG'],
                        ['Test2', 'AAAAACCTCTACTCGGACGCGCTGCGCGTTTGAAGTCGCCGCGCGCGATCAAGGCGCGGGAGTGACTTATTTAGAGCCGTCCGCCAGCCAAATCGGGCATAAGGAAAGCATCAAAGACACCGCCCGCGTGTTGGGCAGGATGTACGACGGCATCGAATATCGCGGCTTCGCTCAGGAAACTGTCGAAGAATTGACGAAATACGCGGGCGTACCCGTGTTCAACGGGCTGACCAACGAGTTCCATCCCACACAAATGCTTGCCGACGCACTGACTATGCGCGAACACAGCGGCAAACCTTGGAACCAAACCGCGTTTGCCTACGTCGGCGACGCGCGTTACAACATGGGCAATTCCCTGCTGATTTTAGGGGCAAAATTGGGGATGGACGTGCGTATCGGCGCACCGCAAAGCCTGTGGCCGTCTGAAGGCATTATTGCCGCCGCACACGCCGCCGCCAAAGAAACCGGCGCAAAAATTACCCTGACCGAAAACGCGCATGAAGCCGTGAAGAATGTTGATTTTATTCATACCGATGTGTGGGTCAGCATGGGCGAGCCGAAAGAAGTCTGGCAGGAACGCATCGATTTGCTGAAAGATTACCGCGTTACGCCCGAACTGATGGCGGCATCGGGCAATCCGCAAGTCAAATTCATGCACTGCCTGCCCGCCTTCCACAACCGCGAAACCAAAGTCGGCGAATGGATTTACGAAACCTTCGGGCTGAACGGTGTGGAAGTTACAGAAGAAGTATTCGAAAGCCCCGCCAGCATCGTGTTCGATCAGGCG'],
                        ['Test3', 'AAAAACCTCTACTCGGACGCGCTGCGCGTTTGAAGTTGCCGCGCGCGACCAAGGAGCGGGAGTGACTTATTTAGAGCCGTCCGCCAGCCAAATCGGGCATAAGGAAAGCATCAAAGACACTGCCCGCGTATTAGGCAGGATGTACGACGGCATCGAATATCGCGGCTTCGCTCAGGAAACTGTCGAAGAATTGGCGAAATACGCCGGCGTGCCCGTATTCAACGGTCTGACCAACGAGTTCCACCCGACCCAAATGCTCGCCGACGCGCTGACCATGCGTGAACACAGCGGCAAACCTTTGAACCAAACCGCATTTGCCTACATCGGCGATGCGCGTTACAACATGGCGAATTCGCTGCTGGTGTTGGGCGCGAAGCTCGGCATGGACGTGCGTATCGGCGCTCCGAAAACCTTGTGGCCGTCTGAAAACATCGTTGCACGCGCACGCGCCGTTGCCGAAGAAACTGGCGGAAAGATTTTGTTGACCGAAAACACGAAAGAAGCTGTTAAGGGCGCAGATTTTATCCATACCGACGTATGGGTCAGCATGGGCGAGCCAAAAGAAGTATGGCAGGAACGCATTGATTTATTGAAAGATTACCGCGTTACCCCCGAGCTGATGGCGGTATCGGGCAACTCGAAGGTCAAATTCATGCACTGCCTACCCGCCTTCCACAATCGGGAAACCAAAGTCGGAGAATGGATTTATGAAACCTTCGGCTTAAACGGTGTAGAAGTAACGGAAGAAGTATTCGAAAGCCCTGCCAGCATCGTGTTCGACCAAGCG'],
                        ['Test4', 'AAAAACATCGACCCGCACCCGCTGCGCGTTTGAAGTCGCCGCACGTGACCAAGGGGCGGGGGTGACTTATCTGGAGCCGTCCGCCAGCCAAATCAGGCATAAGGAAAGCATCAAAGACACTGCCCGCGTGTTGGGCAGGATGTACGACGGCATCGAATATCGCGGCTTCGGGCAGGACGTGGTCGAAGAATTGGCGAAATACGCCGGCGTGCCCGTGTTCAACGGCTTGACCAACGAGTTCCACCCCACCCAAATGCTCGCCGACGCGCTGACCATGCGCGAACACAGCGGCAAACCCTTGAACCAAACCGCGTTTGCCTACGTCGGCGACGCGCGTTACAACATGGCAAACTCGCTGCTGGTGTTGGGCGCGAAGCTCGGCATGGACGTGCGTATCGGCGCACCGAAAACCTTGTGGCCGTCTGAAAACATCGTCGCCCGCGCCCGCGCCGTCGCCGAAGAAACCGGCGGAAAGATTTTGCTGACCGAAAACGCGGAAGAAGCTGTCAAAGGCGTCGATTTTATCCATACCGACGTGTGGGTCAGCATGGGTGAGCCGAAAGAAGCGTGGCAGGAACGCATTGATTTATTGAAAGATTACCGCGTTACTCCCGAGCTGATGGCGGTATCGGGCAACCCGCAGGTCAAATTCATGCACTGCCTGCCCGCCTTCCACAACCGCGAAACCAAAGTCGGCGAATGGATTTACGAAACCTTCGGCTTAAACGGCGTGGAAGTAACGGAAGAAGTGTTCGAAAGCTCCGCCAGCATCGTGTTCGACCAAGCG']]

            result = convert_fasta(test_handle)
            self.assertEqual(expected, result)

    def test_valid_alignment(self):
        with open('test.fasta') as test_handle:
            aln = convert_fasta(test_handle)
            expected = True
            result = valid_alignment(aln)
            self.assertEqual(expected, result)

            aln2 = [['>Test1', 'ZXCXZATC'],
                    ['>Test2', 'ATGCGGATGGGG']]
            expected = False
            result = valid_alignment(aln2)
            self.assertEqual(expected, result)

    def test_valid_chars(self):
        aln = [['>Test1', 'ZXCXZATC'],
               ['>Test2', 'ATGCGGATGGGG']]
        expected = False
        result = valid_chars(aln)
        self.assertEqual(expected, result)

        aln = [['>Test1', 'TCGCGACGTCAA'],
               ['>Test2', 'ATGCGGATGGGG']]
        expected = True
        result = valid_chars(aln)
        self.assertEqual(expected, result)
